// Generated by Xata Codegen 0.18.0. Please do not edit.
import {
  BaseClientOptions,
  buildClient,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "Users",
    columns: [
      { name: "first_name", type: "string" },
      { name: "last_name", type: "string" },
      { name: "email", type: "email", unique: true },
      { name: "password", type: "string" },
      { name: "username", type: "string", unique: true },
    ],
  },
  {
    name: "Products",
    columns: [
      { name: "name", type: "string" },
      { name: "description", type: "string" },
      { name: "price", type: "string" },
      { name: "image_url", type: "string" },
    ],
  },
  {
    name: "Store",
    columns: [
      { name: "products", type: "link", link: { table: "Products" } },
      { name: "owners_id", type: "string" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Users = InferredTypes["Users"];
export type UsersRecord = Users & XataRecord;

export type Products = InferredTypes["Products"];
export type ProductsRecord = Products & XataRecord;

export type Store = InferredTypes["Store"];
export type StoreRecord = Store & XataRecord;

export type DatabaseSchema = {
  Users: UsersRecord;
  Products: ProductsRecord;
  Store: StoreRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://hamsaharcourt-s-workspace-gb1b8d.eu-west-1.xata.sh/db/Frontier",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
